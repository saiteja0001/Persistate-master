{"ast":null,"code":"// import {\n//     createStore\n//   } from \"redux\";\n//   import rootReducer from '../reducers/index'\n//   const LOCAL_STORAGE_NAME = \"localData\";\n//   class PersistedStore {\n//     // Singleton property\n//     static DefaultStore = null;\n//     // Accessor to the default instance of this class\n//     static getDefaultStore() {\n//       if (PersistedStore.DefaultStore === null) {\n//         PersistedStore.DefaultStore = new PersistedStore();\n//       }\n//       return PersistedStore.DefaultStore;\n//     }\n//     // Redux store\n//     _store = null;\n//     // When class instance is used, initialize the store\n//     constructor() {\n//       this.initStore()\n//     }\n//     // Initialization of Redux Store\n//     initStore() {\n//       this._store = createStore(rootReducer, PersistedStore.loadState());\n//       this._store.subscribe(() => {\n//         PersistedStore.saveState(this._store.getState());\n//       });\n//     }\n//     // Getter to access the Redux store\n//     get store() {\n//       return this._store;\n//     }\n//     // Loading persisted state from localStorage, no need to access\n//     // this method from the outside\n//     static loadState() {\n//       try {\n//         let serializedState = localStorage.getItem(LOCAL_STORAGE_NAME);\n//         if (serializedState === null) {\n//           return PersistedStore.initialState();\n//         }\n//         return JSON.parse(serializedState);\n//       } catch (err) {\n//         return PersistedStore.initialState();\n//       }\n//     }\n//     // Saving persisted state to localStorage every time something\n//     // changes in the Redux Store (This happens because of the subscribe() \n//     // in the initStore-method). No need to access this method from the outside\n//     static saveState(state) {\n//       try {\n//         let serializedState = JSON.stringify(state);\n//         localStorage.setItem(LOCAL_STORAGE_NAME, serializedState);\n//       } catch (err) {}\n//     }\n//     // Return whatever you want your initial state to be\n//     static initialState() {\n//       return {};\n//     }\n//   }\n//   export default PersistedStore;","map":{"version":3,"sources":["/home/novisync/Desktop/reactjs/Persistate-master/src/store/store/PersistedStore.js"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import {\n//     createStore\n//   } from \"redux\";\n  \n//   import rootReducer from '../reducers/index'\n  \n//   const LOCAL_STORAGE_NAME = \"localData\";\n  \n//   class PersistedStore {\n  \n//     // Singleton property\n//     static DefaultStore = null;\n  \n//     // Accessor to the default instance of this class\n//     static getDefaultStore() {\n//       if (PersistedStore.DefaultStore === null) {\n//         PersistedStore.DefaultStore = new PersistedStore();\n//       }\n  \n//       return PersistedStore.DefaultStore;\n//     }\n  \n//     // Redux store\n//     _store = null;\n  \n//     // When class instance is used, initialize the store\n//     constructor() {\n//       this.initStore()\n//     }\n  \n//     // Initialization of Redux Store\n//     initStore() {\n//       this._store = createStore(rootReducer, PersistedStore.loadState());\n//       this._store.subscribe(() => {\n//         PersistedStore.saveState(this._store.getState());\n//       });\n//     }\n  \n//     // Getter to access the Redux store\n//     get store() {\n//       return this._store;\n//     }\n  \n//     // Loading persisted state from localStorage, no need to access\n//     // this method from the outside\n//     static loadState() {\n//       try {\n//         let serializedState = localStorage.getItem(LOCAL_STORAGE_NAME);\n  \n//         if (serializedState === null) {\n//           return PersistedStore.initialState();\n//         }\n  \n//         return JSON.parse(serializedState);\n//       } catch (err) {\n//         return PersistedStore.initialState();\n//       }\n//     }\n  \n//     // Saving persisted state to localStorage every time something\n//     // changes in the Redux Store (This happens because of the subscribe() \n//     // in the initStore-method). No need to access this method from the outside\n//     static saveState(state) {\n//       try {\n//         let serializedState = JSON.stringify(state);\n//         localStorage.setItem(LOCAL_STORAGE_NAME, serializedState);\n//       } catch (err) {}\n//     }\n  \n//     // Return whatever you want your initial state to be\n//     static initialState() {\n//       return {};\n//     }\n//   }\n  \n//   export default PersistedStore;\n  "]},"metadata":{},"sourceType":"module"}